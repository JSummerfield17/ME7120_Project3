variables
%All of these actions are not the most efficient for this problem.
%t1=0;
%dt=.01;
%t2=0.1;
%impactime=.01;
t=0.1;
Ixx1=1/12*(t)^4
Ixx2=1/12*(t)^4
Iyy1=Ixx1
Iyy2=Ixx2
J1=0.95*(Ixx1+Iyy1)
J2=0.95*(Ixx2+Iyy2)

element properties
% Beam format
% E G rho A1    A2    J1 J2 Ixx1 Ixx2 Iyy1 Iyy2
steel    (t)^2  (t)^2 J1 J2 Ixx1 Ixx2 Iyy1 Iyy2
%Note that these were defined above. I can use variables in my input file.
% I also used "steel" as a property. WFEM has some of these predefined. 
% Run "units" and type "who" to see variables/values available inside your
% input file

Project1 elements
%node1 node2 pointnum (beam properties number)
1 2 1 1
2 3 1 1
3 4 1 1
4 5 1 1

nodes
% I can include comment lines
% node num, x y z, Node number isn't ever stored in nodes matrix
1 0 0 0 
2 0 1.5 0
3 0 3 0
4 1 3 0
5 2 3 0

points
1 1 1 1

fix pin
1 0 0 1

fix surfaceball 
5 0 1 0
5 0 0 1

load 
%node# dof# load
5 1 100000


actions
modalanalysis
who
fs %dump sorted natural frequencies to the screen
% The stuff inside actions is simply executed at the wfem prompt. Any
% Matlab command can also be executed here. For example, you could double
% the mass matrix then do another modal analysis. 
% This will display natural frequencies and prompt for mode shape display
%if uncommented
%modalreview
fsold=fs %Let's store them for later comparison
M=M/4; %Dividing M by 4 should double the natural frequencies
fs=[]; % WFEM won't run another modal analysis unless I force it to 
%It's smart enough to know that it has already been done, so I need to 
%clear the results to it is forced to regenerate them with another
%modalanalysis.
modalanalysis
disp('Natural Frequencies in KHz')
fprintf('%7.3f %7.3f\n',[fsold'; fs'])
disp('See, the natural frequency doubled as expected') % I wrote this out 
%to the output for the user to read after execution.
% Uncommenting this line will cause an exit from WFEM immediately after 
% execution
staticanalysis
plotdeformed
%Here are the displacements, X
X
modalreview
end